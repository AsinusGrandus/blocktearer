<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>McWordTearer</title>
</head>
<body>
    <a href="/">Go back</a>
    <br>
    <h3><%=locals.block.id%>: <%=locals.block.name%></h3>
    <div><%=locals.block.firstFourBits%> <%=locals.block.lastNineBits%></div>
    <div><%=locals.block.details%></div>
    <br>
    <div class='column_holder'>
        <div id="first_blocks_column" class="block_column">
            <b>First block options:</b>
            <div id="first_blocks_column_grid" class="grid" data-blocks="<%=locals.first_blocks%>"></div>
        </div>
        <div id="last_blocks_column" class="block_column">
            <b>Second block options:</b>
            <div id="last_blocks_column_grid" class="grid" data-blocks="<%=locals.last_blocks%>"></div>
        </div>
    </div>
    <!-- Popup -->
    <div class="modal">
        <div class="modal-content">
            <span class="close-button">x</span>
            <!-- <img id="blockimg"> -->
            <h3 id="blockname">Block name</h3>
            <div id="bits"><b>4bits</b>9bits</div>
            <div id="details">details</div>
        </div>
    </div>
</body>
<script>
    const columnIds = ['#first_blocks_column_grid', '#last_blocks_column_grid']

    // Create two columns with blocks
    columnIds.forEach((id) => {
        const blockColumn = document.querySelector(id); // get column
        const blocks = JSON.parse(blockColumn.dataset.blocks); // get block data

        let Used = new Array();

        blocks.forEach((element) => {
            if (Used.includes(element.name)) {
                // the block is already used
                // A <p> and <img> are combined into a <div> that has an array with details and the block it belongs to as dataset
                const detailsDiv = document.getElementById(element.name);

                if (detailsDiv == "undefined") {return}

                const blockArray = JSON.parse(detailsDiv.dataset.details);
                blockArray.push(element);
                detailsDiv.dataset.details = JSON.stringify(blockArray);

                return
            }

            // Create <div> element that will contain <p> and <img> 
            const div = document.createElement('div');
            div.id = element.name;
            div.classList.add('block')
            div.addEventListener("click", function(){ popUp(element.name); });
            div.dataset.details = JSON.stringify([element]);
            div.dataset.block = JSON.stringify([element]);
            // append to column
            blockColumn.appendChild(div);

            // Create <img> element
            const img = document.createElement('img');
            img.src = element.img
            img.setAttribute("height", "50");
            img.setAttribute("width", "50");
            img.addEventListener("error", function(){ 
                this.onerror=null;
                this.src='https://minecraft-api.vercel.app/images/blocks/air.png'
             });
            div.appendChild(img)

            // Create <p> element
            const blockP = document.createElement('p');
            const text = document.createTextNode(element.oldName);
            blockP.appendChild(text); // add text to <p>
            div.appendChild(blockP); // add to <div>
                        
            // mark element as used
            Used.push(element.name)
        })

    })

    function toggleModal() {
        const modal = document.querySelector(".modal");
        modal.classList.toggle("show-modal");
    }

    function popUp(id) {
        const closeButton = document.querySelector(".close-button");
        closeButton.addEventListener("click", toggleModal);

        const dataDiv = document.getElementById(id);
        const details = JSON.parse(dataDiv.dataset.details); // [{},{}]
        const block = JSON.parse(dataDiv.dataset.block)[0];

        // const imgImg = document.getElementById("blockimg");
        // img.src = block.img;

        const nameH = document.getElementById('blockname');
        nameH.innerHTML = 'Name: ' + block.name;

        const bitsDiv = document.getElementById('bits');
        bitsDiv.innerHTML = 'Bits: ' + block.firstFourBits + ' ' + block.lastNineBits;

        const detailDiv = document.getElementById('details');
        let detailDivText = "Details:<br>";
        

        details.forEach((block) => {
            let detailText = new String();
            block.details.forEach((detail) => {
                detailText += detail + ", ";
            })
            detailDivText += block.id + ': ' + detailText.slice(0, -2) + "<br>";
        })
        // Make this prettier
        detailDiv.innerHTML = detailDivText;

        toggleModal()
    }
</script>
<style>
    /*Website style*/
    .column_holder {
        vertical-align: text-top;
        display: grid;
        grid-auto-columns: 1fr;
        grid-auto-rows: 1fr;
        grid-auto-flow: column;
        gap: 10px;
        
    }
    .block_column {
        border-color: rgb(99, 99, 99);
        border-width: 5px;
        border-style: solid;
    }
    .grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 5px;
        padding: 5px;
    }
    .block {
        display: grid;
        place-items:  center;
    }
    /* https://sabe.io/tutorials/how-to-create-modal-popup-box */
    .modal {
        position: fixed;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        opacity: 0;
        visibility: hidden;
        transform: scale(1.1);
        transition: visibility 0s linear 0.25s, opacity 0.25s 0s, transform 0.25s;
    }

    .modal-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 1rem 1.5rem;
        width: 24rem;
        border-radius: 0.5rem;
    }

    .close-button {
        float: right;
        width: 1.5rem;
        line-height: 1.5rem;
        text-align: center;
        cursor: pointer;
        border-radius: 0.25rem;
        background-color: lightgray;
    }

    .close-button:hover {
        background-color: darkgray;
    }

    .show-modal {
        opacity: 1;
        visibility: visible;
        transform: scale(1.0);
        transition: visibility 0s linear 0s, opacity 0.25s 0s, transform 0.25s;
    }
</style>
</html>